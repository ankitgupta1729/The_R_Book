getwd()
tinytex::install_tinytex()
print(peas <- c(4, 7, 6, 5, 6, 7))
print(class(peas))
print(length(peas))
print(mean(peas))
print(min(peas))
print(max(peas))
print(quantile(peas))
quantile(peas, seq(0,1, by = 0.25))
print(quantile(peas, seq(0,1, by = 0.10)))
print(quantile(peas, seq(0,1, by = 0.25)))
sort(peas)
7/4
6/4
8*0.75
print(peas)
scan()
x<-scan()
print(peas)
print(peas[4])
pods <- c(2,3,6)
print(pods)
print(peas[pods])
print(peas[-2])
print(peas[-length(peas)])
# function to remove smallest two and largest two values from a vector
trim <- function(x) sort(x)[-c(1,2,length(x)-1,length(x))]
trim(peas)
print(sort(peas)[3])
print(trim(peas))
print(peas[1:3])
print(peas[seq(2,length(peas),2)])
seq(5)
print(peas[1:length(peas) %% 2 == 0])
y <- 4.3
z <- y[-1]
print(length(z))
(counts <- c(25,12,7,4,6,2,1,0,2))
(counts <- c(25,12,7,4,6,2,1,0,2))
names(counts) <- 0:8 # naming 25 zeros, 12 ones,..so on to counts
print(counts)
rpois(3)
rpois(2,3)
rpois(5,3)
rpois(20,3)
rpois(20,3.6)
print((st <- table(rpois(2000,2.3))))
(st <- table(rpois(2000,2.3)))
rpois(2000,2.3)
table(rpois(2000,2.3))
x<-rpois(2000,2.3)
x.count(0)
(st <- table(rpois(2000,2.3)))
as.vector(st)
print(as.vector(st))
x <- 0:10
print(sum(x))
print(sum(x<5))
print(sum(x[x<5]))
# summing 3 largest elemets
y <- c(8,3,5,7,6,6,8,9,2,3,9,4,10,4,11)
sum(rev(sort(y))[1:3])
## indices where maximum and minimum are there
# slow way to do it
print(which(x == max(x)))
# Note that we have not changed the vector y in any way, nor have we created any new space-consuming
# vectors during intermediate computational steps
x <- c(2,3,4,1,5,8,2,3,7,5,7)
## indices where maximum and minimum are there
# slow way to do it
print(which(x == max(x)))
print(which(x == min(x)))
print(which.max(x))
print(which.min(x))
print(mean(y))
print(range(y))
print(fivenum(y))
print(counts[1:30])
(counts[1:30])
counts <- rnbinom(10000,mu=0.92,size=1.1)
counts[1:30]
print(counts[1:30])
print(table(counts))
data<-read.table("temperatures.txt",header=T)
setwd("C:\Users\ankit19.gupta\OneDrive - Reliance Corporate IT Park Limited\Desktop\Practice_Code\R_Practice\TheRbook\Chapter2")
setwd("C:\\Users\ankit19.gupta\OneDrive - Reliance Corporate IT Park Limited\Desktop\Practice_Code\R_Practice\TheRbook\Chapter2")
setwd("C:\\Users/ankit19.gupta/OneDrive - Reliance Corporate IT Park Limited/Desktop/Practice_Code/R_Practice/TheRbook/Chapter2")
data<-read.table("temperatures.txt",header=T)
getwd()
data<-read.table("\temperatures.txt",header=T)
data<-read.table("/temperatures.txt",header=T)
data<-read.table("temperature.txt",header=T)
data<-read.table("temperature.txt",header=TRUE)
data<-read.table("/temperature.txt",header=TRUE)
data<-read.table("\temperature.txt",header=TRUE)
data<-read.table("temperature.txt",header=TRUE)
data<-read.table("temperature.txt", header=TRUE)
data<-read.table("temperature.txt")
data<-read.table("temperature.txt")
data<-read.table("temperatures.txt",header=T)
attach(data)
names(data)
print(names(data))
print(tapply(temperature,month,mean))
View(data)
print(tapply(temperature,month,var))
print(tapply(temperature,month,min))
print(tapply(temperature,month,function(x) sqrt(var(x)/length(x))))
29*18
522+225
sqrt(747)
28*18
504+225
sqrt(729)
(15+27)/14
(15-27)/14
print(tapply(temperature,month,function(x) sqrt(var(x)/length(x)))) #standard error calculation
print(tapply(temperature,list(yr,month),mean)[,1:6])
#You can see at once that January
#(month 1) 1993 was exceptionally warm and January 1987 exceptionally cold.
print(tapply(temperature,yr,mean,na.rm=TRUE))
print(tapply(temperature,yr,mean,na.rm=TRUE))
print(tapply(temperature,yr,mean,na.rm=TRUE))
print(tapply(temperature,yr,mean,na.rm=TRUE))
print(tapply(temperature,yr,mean,trim=0.2))
data<-read.table("pHDaphnia.txt",header=T)
print(names(data))
print(aggregate(Growth.rate~Water,data,mean))
print(aggregate(Growth.rate~Water+Detergent,data,mean)) # one to many
print(aggregate(cbind(pH,Growth.rate)~Water+Detergent,data,mean)) # many to many
data <- read.table("daphnia.txt",header=T)
attach(data)
data <- read.table("daphnia.txt",header=T)
attach(data)
names(data)
print(aggregate(Growth.rate~Water+Detergent,data,mean)) # one to many
data <- read.table("daphnia.txt",header=T)
attach(data)
names(data)
print(tapply(Growth.rate,Detergent,mean))
print(tapply(Growth.rate,list(Water,Daphnia),median))
y <- c(8,3,5,7,6,6,8,9,2,3,9,4,10,4,11)
which(y>5)
print(y[y>5])
print(length(y))
print(length(y[y>5]))
xv <- rnorm(1000,100,10)
# finding closest value to 108 in xv
print(which(abs(xv-108)==min(abs(xv-108))))
print(xv[which(abs(xv-108)==min(abs(xv-108)))])
print(closest(xv,108))
closest <- function(xv,sv){
xv[which(abs(xv-sv)==min(abs(xv-sv)))] }
print(closest(xv,108))
houses <- read.table("houses.txt",header=T)
attach(houses)
names(houses)
ranks <- rank(Price)
sorted <- sort(Price)
ordered <- order(Price)
view <- data.frame(Price,ranks,sorted,ordered)
print(view)
# Fractional ranks indicate ties. There are two 188s in Price and their ranks are 8 and 9. Because they are tied,
# each gets the average of their two ranks (8 + 9)/2 = 8.5
print(Location[order(Price)])
print(Location[rev(order(Price))])
print(table(names))
names <- c("Williams","Jones","Smith","Williams","Jones","Williams")
print(table(names))
print(unique(names))
print(duplicated(names))
print(names[!duplicated(names)])
salary <- c(42,42,48,42,42,42)
print(mean(salary))
print(salary[!duplicated(names)])
print(mean(salary[!duplicated(names)]))
# Looking for runs of numbers within vectors
(poisson <- rpois(150,0.7))
print(rle(poisson)) #rle means run length encoding
print(names[!duplicated(names)])
print(rle(poisson)) #rle means run length encoding
# find the longest run index
print(max(rle(poisson)[[1]]))
# find the longest run index
print(which(rle(poisson)[[1]]==7))
print(rle(poisson)[[2]][55])
print(rle(poisson)[[2]][40])
run.and.value <- function (x) {
a <- max(rle(poisson)[[1]])
b <- rle(poisson)[[2]][which(rle(poisson)[[1]] == a)]
cat("length = ",a," value = ",b, "\n")}
run.and.value(poisson)
setA <- c("a", "b", "c", "d", "e")
setB <- c("d", "e", "f", "g")
print(union(setA,setB))
print(intersect(setA,setB))
print(setdiff(setA,setB))
print(setdiff(setB,setA))
# it should be the case that setdiff(setA,setB) plus intersect(setA,setB) plus setdiff(
# setB,setA) is the same as the union of the two sets
print(all(c(setdiff(setA,setB),intersect(setA,setB),setdiff(setB,setA))==
union(setA,setB)))
#There is also a built-in function setequal for testing if two sets are equal:
print(setequal(c(setdiff(setA,setB),intersect(setA,setB),setdiff(setB,setA)),
union(setA,setB)))
print(setA %in% setB)
print(setB %in% setA)
#Using these vectors of logical values as subscripts, we can demonstrate, for instance, that setA[setA                                                                      %in% setB] is the same as intersect(setA,setB):
print(setA[setA %in% setB])
